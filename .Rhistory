nodes <- data.frame(id = 1:4,
shape = c("box"),
level = c(1,2,3,3),
label = c("debitor/\nskyldner","overdrager ved salg","1. kreditor","2. kreditor"),
font.size = c(10,10,10,10))
edges <- data.frame(from = c(1,2,2), to = c(2,3,4),
arrows = c("to","to","to"),
font.size = c(10,10,10),
label = c("","HR: I hænde/\n god tro, GBL § 14","Senere kreditor"),
length = c(100,100,100),
shadow = TRUE
)
visNetwork(nodes, edges, width = "100%") %>%
visInteraction(dragNodes = TRUE,
dragView = TRUE,
zoomView = FALSE) %>%
visNodes(color = list(background = "white",
border = "white",
highlight = "yellow"),
shadow = list(enabled = TRUE, size = 30))  %>%
visHierarchicalLayout(direction = "UD",levelSeparation = 100)  %>%
visLayout(randomSeed = 24) %>%
visEdges(color = list(color = "lightgrey", highlight = "yellow"))
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
nodes <- data.frame(id = 1:2,
shape = c("box"),
level = c(1,2,3,3),
label = c("Anne\nskyldner","Bonnie\nskyldner på hovedkravet"),
font.size = c(25,25))
edges <- data.frame(from = c(1,2), to = c(2,1),
arrows = c("to","to"),
font.size = c(20,20),
label = c("","GBL § 22"),
length = c(100,100),
shadow = TRUE
)
visNetwork(nodes, edges, width = "100%") %>%
visInteraction(dragNodes = TRUE,
dragView = TRUE,
zoomView = FALSE) %>%
visNodes(color = list(background = "white",
border = "white",
highlight = "yellow"),
shadow = list(enabled = TRUE, size = 30))  %>%
visHierarchicalLayout(direction = "LR",levelSeparation = 500)  %>%
visLayout(randomSeed = 24) %>%
visEdges(color = list(color = "lightgrey", highlight = "yellow"))
nodes <- data.frame(id = 1:2,
shape = c("box"),
level = c(1,2,3,3),
label = c("Anne\nskyldner","Bonnie\nskyldner på hovedkravet"),
font.size = c(25,25))
edges <- data.frame(from = c(1,2), to = c(2,1),
arrows = c("to","to"),
font.size = c(20,20),
label = c("","GBL § 22"),
length = c(100,100),
shadow = TRUE
)
visNetwork(nodes, edges, width = "100%") %>%
visInteraction(dragNodes = TRUE,
dragView = TRUE,
zoomView = FALSE) %>%
visNodes(color = list(background = "white",
border = "white",
highlight = "yellow"),
shadow = list(enabled = TRUE, size = 30))  %>%
visHierarchicalLayout(direction = "LR",levelSeparation = 500)  %>%
visLayout(randomSeed = 24) %>%
visEdges(color = list(color = "lightgrey", highlight = "yellow"))
nodes <- data.frame(id = 1:2,
shape = c("box"),
level = c(1,2),
label = c("Anne\nskyldner","Bonnie\nskyldner på hovedkravet"),
font.size = c(25,25))
edges <- data.frame(from = c(1,2), to = c(2,1),
arrows = c("to","to"),
font.size = c(20,20),
label = c("","GBL § 22"),
length = c(100,100),
shadow = TRUE
)
visNetwork(nodes, edges, width = "100%") %>%
visInteraction(dragNodes = TRUE,
dragView = TRUE,
zoomView = FALSE) %>%
visNodes(color = list(background = "white",
border = "white",
highlight = "yellow"),
shadow = list(enabled = TRUE, size = 30))  %>%
visHierarchicalLayout(direction = "LR",levelSeparation = 500)  %>%
visLayout(randomSeed = 24) %>%
visEdges(color = list(color = "lightgrey", highlight = "yellow"))
nodes <- data.frame(id = 1:2,
shape = c("box"),
level = c(1,2),
label = c("Anne\nskyldner","Bonnie\nskyldner på hovedkravet"),
font.size = c(25,25))
edges <- data.frame(from = c(1,2), to = c(2,1),
arrows = c("to","to"),
font.size = c(20,20),
label = c("Bonnie låner 100 kr. af Anne\nAnne har hovedkrav på 100 kr.",""),
length = c(100,100),
shadow = TRUE
)
visNetwork(nodes, edges, width = "100%") %>%
visInteraction(dragNodes = TRUE,
dragView = TRUE,
zoomView = FALSE) %>%
visNodes(color = list(background = "white",
border = "white",
highlight = "yellow"),
shadow = list(enabled = TRUE, size = 30))  %>%
visHierarchicalLayout(direction = "LR",levelSeparation = 500)  %>%
visLayout(randomSeed = 24) %>%
visEdges(color = list(color = "lightgrey", highlight = "yellow"))
nodes <- data.frame(id = 1:2,
shape = c("box"),
level = c(1,2),
label = c("Anne\nskyldner","Bonnie\nskyldner på hovedkravet"),
font.size = c(20,20))
edges <- data.frame(from = c(1,2), to = c(2,1),
arrows = c("to","to"),
font.size = c(15,15),
label = c("Bonnie låner 100 kr. af Anne\nAnne har hovedkrav på 100 kr.",""),
length = c(100,100),
shadow = TRUE
)
visNetwork(nodes, edges, width = "100%") %>%
visInteraction(dragNodes = TRUE,
dragView = TRUE,
zoomView = FALSE) %>%
visNodes(color = list(background = "white",
border = "white",
highlight = "yellow"),
shadow = list(enabled = TRUE, size = 30))  %>%
visHierarchicalLayout(direction = "LR",levelSeparation = 700)  %>%
visLayout(randomSeed = 24) %>%
visEdges(color = list(color = "lightgrey", highlight = "yellow"))
nodes <- data.frame(id = 1:2,
shape = c("box"),
level = c(1,2),
label = c("Anne\nskyldner","Bonnie\nskyldner på hovedkravet"),
font.size = c(20,20))
edges <- data.frame(from = c(1,2), to = c(2,1),
arrows = c("to","to"),
font.size = c(15,15),
label = c("Bonnie låner 100 kr. af Anne\nAnne har hovedkrav på 100 kr.\Bonnie betaler 50 kr. for Anne\nBonnie modregner sit modkrav på 50 kr. i Annes hovedkrav.",""),
nodes <- data.frame(id = 1:2,
shape = c("box"),
level = c(1,2),
label = c("Anne\nskyldner","Bonnie\nskyldner på hovedkravet"),
font.size = c(20,20))
edges <- data.frame(from = c(1,2), to = c(2,1),
arrows = c("to","to"),
font.size = c(15,15),
label = c("Bonnie låner 100 kr. af Anne\nAnne har hovedkrav på 100 kr.\nBonnie betaler 50 kr. for Anne\nBonnie modregner sit modkrav på 50 kr. i Annes hovedkrav.",""),
length = c(100,100),
shadow = TRUE
)
visNetwork(nodes, edges, width = "100%") %>%
visInteraction(dragNodes = TRUE,
dragView = TRUE,
zoomView = FALSE) %>%
visNodes(color = list(background = "white",
border = "white",
highlight = "yellow"),
shadow = list(enabled = TRUE, size = 30))  %>%
visHierarchicalLayout(direction = "LR",levelSeparation = 700)  %>%
visLayout(randomSeed = 24) %>%
visEdges(color = list(color = "lightgrey", highlight = "yellow"))
library(timevis)
data <- data.frame(
id      = 1:4,
content = c("Krav blev fremsat",
"Forældelsesperiode på 3 år", "Krav forældes"),
start   = c("2019-01-01","2019-01-01","2022-01-01"),
end     = c( NA, "2022-01-01", NA) )
library(timevis)
data <- data.frame(
id      = 1:3,
content = c("Krav blev fremsat",
"Forældelsesperiode på 3 år", "Krav forældes"),
start   = c("2019-01-01","2019-01-01","2022-01-01"),
end     = c( NA, "2022-01-01", NA) )
timevis(data)%>%
setOptions(list(editable = FALSE)) %>%
setSelection("5") %>%
fitWindow(list(animation = TRUE))
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
library(timevis)
data <- data.frame(
id      = 1:5,
content = c("6 måneder fra 2019-02-01 til 2019-08-01", "Omstødelsesperiode<br>starter<br>2019-02-01",
"Overdragelse<br>af gave<br>2019-05-01", "Fristdag<br>2019-08-01","Konkursdekret<br>2019-08-22"),
start   = c("2019-02-01", "2019-02-01",
"2019-05-01", "2019-08-01","2019-08-22"),
end     = c("2019-08-01", NA, NA, NA,NA) )
timevis(data)%>%
setOptions(list(editable = FALSE)) %>%
setSelection("5") %>%
fitWindow(list(animation = TRUE))
library(timevis)
data <- data.frame(
id      = 1:5,
content = c("6 måneder fra 2019-02-01 til 2019-08-01", "Omstødelsesperiode<br>starter<br>2019-02-01",
"Overdragelse<br>af gave<br>2019-05-01", "Fristdag<br>2019-08-01","Konkursdekret<br>2019-08-22"),
start   = c("2019-02-01", "2019-02-01",
"2019-05-01", "2019-08-01","2019-08-22"),
end     = c("2019-08-01", NA, NA, NA,NA) )
timevis(data, showZoom = FALSE)%>%
setOptions(list(editable = FALSE)) %>%
setSelection("5") %>%
fitWindow(list(animation = TRUE))
library(timevis)
data <- data.frame(
id      = 1:5,
content = c("6 måneder fra 2019-02-01 til 2019-08-01", "Omstødelsesperiode<br>starter<br>2019-02-01",
"Overdragelse<br>af gave<br>2019-05-01", "Fristdag<br>2019-08-01","Konkursdekret<br>2019-08-22"),
start   = c("2019-02-01", "2019-02-01",
"2019-05-01", "2019-08-01","2019-08-22"),
end     = c("2019-08-01", NA, NA, NA,NA) )
timevis(data, showZoom = FALSE, zoomFactor = 0)%>%
setOptions(list(editable = FALSE)) %>%
setSelection("5") %>%
fitWindow(list(animation = TRUE))
library(timevis)
data <- data.frame(
id      = 1:5,
content = c("6 måneder fra 2019-02-01 til 2019-08-01", "Omstødelsesperiode<br>starter<br>2019-02-01",
"Overdragelse<br>af gave<br>2019-05-01", "Fristdag<br>2019-08-01","Konkursdekret<br>2019-08-22"),
start   = c("2019-02-01", "2019-02-01",
"2019-05-01", "2019-08-01","2019-08-22"),
end     = c("2019-08-01", NA, NA, NA,NA) )
timevis(data, showZoom = FALSE, zoomFactor = 0.001)%>%
setOptions(list(editable = FALSE)) %>%
setSelection("5") %>%
fitWindow(list(animation = TRUE))
library(timevis)
data <- data.frame(
id      = 1:5,
content = c("6 måneder fra 2019-02-01 til 2019-08-01", "Omstødelsesperiode<br>starter<br>2019-02-01",
"Overdragelse<br>af gave<br>2019-05-01", "Fristdag<br>2019-08-01","Konkursdekret<br>2019-08-22"),
start   = c("2019-02-01", "2019-02-01",
"2019-05-01", "2019-08-01","2019-08-22"),
end     = c("2019-08-01", NA, NA, NA,NA) )
timevis(data, showZoom = FALSE, zoomFactor = 0.001)%>%
setOptions(list(editable = FALSE)) %>%
setSelection("5") %>%
fitWindow(list(animation = TRUE))
library(timevis)
data <- data.frame(
id      = 1:5,
content = c("6 måneder fra 2019-02-01 til 2019-08-01", "Omstødelsesperiode<br>starter<br>2019-02-01",
"Overdragelse<br>af gave<br>2019-05-01", "Fristdag<br>2019-08-01","Konkursdekret<br>2019-08-22"),
start   = c("2019-02-01", "2019-02-01",
"2019-05-01", "2019-08-01","2019-08-22"),
end     = c("2019-08-01", NA, NA, NA,NA) )
timevis(data, showZoom = FALSE)%>%
setOptions(list(editable = FALSE)) %>%
setSelection("5") %>%
fitWindow(list(animation = TRUE))
data <- USPersonalExpenditure[,c('Categorie', 'X1960')]
library(plotly)
USPersonalExpenditure <- data.frame("Categorie"=rownames(USPersonalExpenditure), USPersonalExpenditure)
data <- USPersonalExpenditure[,c('Categorie', 'X1960')]
p <- plot_ly(data, labels = ~Categorie, values = ~X1960, type = 'pie') %>%
layout(title = 'United States Personal Expenditures by Categories in 1960',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = api_create(p, filename="pie-basic")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
options(knitr.table.format = "html")
collapse_rows_dt <- data.frame(Regel = c("Koncipistreglen", "Minimumsreglen","Prioritetsreglen", "Gyldighedsreglen","Rimelighedsreglen"),
Tolkning = c("Dette fortolkningsprincip kaldes også for uklarhedsreglen og betyder, at den part som har konciperet (skrevet) kontrakten må bære risikoen for tvetydighed. Er der en uklarhed i kontrakten, tolkes aftalen til skade eller ugunst for koncipisten og dermed mindst tyngende for den anden part, som ikke har haft indflydelse på aftalens formulering. Uklarhedsreglen er særlig relevant ved fortolkning af standardaftaler, der er udarbejdet af en stærk part.",
"Hvis der er tvivl om, hvad løftegiveren har forpligtet sig til i aftalen, vælges den forståelse af aftalen, som er
mest gunstig for løftegiveren. Hvis der fx er tvivl, om der er aftalt simpel kaution eller selvskyldnerkaution, vælges simpel kaution, der er mest gunstig for forbrugeren. Særligt hvad angår forbrugeraftaler, har minimumsreglen fundet en plads i AFTL § 38b. Bestemmelsen beskytter forbrugeren i de tilfælde, hvor et tyngende aftalevilkår ikke har været til forhandling med en erhvervsdrivende aftalepart. En sådan aftale skal tolkes på den måde, som er mest gunstig for forbrugeren.
",
"Ved fortolkning efter prioritetsreglen går et specielt vilkår forud for et generelt vilkår. Man kan også kalde det en fortolkning efter et lex specialis-princip, hvor en speciel og udspecificeret bestemmelse vejer tungere end en generel formuleret bestemmelse",
"Hvis man står overfor et valg, om aftalen er gyldig og kan gennemføres, eller ugyldig og må bortfalde, er gyldighedsreglen et fortolkningsprincip, hvor aftalen tolkes med henblik på at opnå en gyldig aftale, som vil kunne gennemføres.",
"Efter rimelighedsreglen fortolker man ud fra hensigtsmæssigheds- og rimelighedsbetragtninger. Ved tvivl om forståelsen af en aftale, tolkes aftalen i overensstemmelse med, hvad der er rimeligt."))
kable(collapse_rows_dt, align = "l",caption = "Regler og tolkning") %>%
kable_styling(full_width = T,bootstrap_options = c( "hover","responsive","bordered","striped")) %>%
column_spec(1, bold = F) %>%
collapse_rows(columns = 1:2, valign = "top") %>%
column_spec(1:2,  bold = F, color = "black", background = "lightgrey")%>%
column_spec(1,  bold = T,italic = TRUE)%>%
row_spec(0, bold = T, color = "white", background = "darkgrey")
# row_spec(5:9, bold = T, color = "Black", background = "yellow") %>%
# add_header_above(c( "Koncipistreglen" = 2),italic = TRUE)
cat(readLines('np.html'))
nodes <- data.frame(id = 1:7,
shape = c("box"),
label = c(" Aftalelov "," Forsikringsaftalelov "," Kreditaftalelov "," Forbrugeraftalelov "," Aftale om pant "," Købelov "," Kautionsaftale "),
font.size = c(50,25,25,25,25,25,25))
edges <- data.frame(from = c(1,1,1,1,1,1), to = c(2,3,4,5,6,7),arrows = c("to"),length = rep(40,6))
visNetwork(nodes, fig.width=4,edges,  width = "100%") %>%
visInteraction(dragNodes = TRUE,
dragView = TRUE,
zoomView = FALSE) %>%
visNodes(color = list(background = "white",
border = "white",
highlight = "yellow"),
shadow = list(enabled = TRUE, size = 30))  %>%
visHierarchicalLayout(direction = "LR",levelSeparation = 300) %>%
visEdges(color = list(color = "lightgrey", highlight = "yellow") )
# visLayout(randomSeed = 24) # to have always the same network
nodes <- data.frame(id = 1:2, shape = c("box"),label = c(" Sælger "," Køber "),font.size = c(30,30))
edges <- data.frame(from = c(1),
to = c(2),
arrows = c("to","from"),
length = c(600,500),
label=c("Varer/Ydelser","Penge/modydelse"),
font.size = c(15,15),
smooth = c(TRUE,TRUE)
)
visNetwork(nodes, edges,  width = "100%") %>%
visInteraction(dragNodes = TRUE,
dragView = TRUE,
zoomView = FALSE) %>%
visNodes(color = list(background = "white",
border = "white",
highlight = "yellow"),
shadow = list(enabled = TRUE, size = 30))  %>%
visHierarchicalLayout(direction = "LR",levelSeparation = 300) %>%
visEdges(color = list(color = "lightgrey", highlight = "yellow") )
nodes <- data.frame(id = 1:2, shape = c("box"),label = c(" Testator "," Arving "),font.size = c(30,30))
edges <- data.frame(from = c(1),
to = c(2),
arrows = c("to"),
length = c(300),
font.size = c(15),
label=c(" ARV "),
smooth = FALSE
)
visNetwork(nodes, edges,  width = "100%") %>%
visInteraction(dragNodes = TRUE,
dragView = TRUE,
zoomView = FALSE) %>%
visNodes(color = list(background = "white",
border = "white",
highlight = "yellow"),
shadow = list(enabled = TRUE, size = 30))  %>%
visHierarchicalLayout(direction = "LR",levelSeparation = 300) %>%
visEdges(color = list(color = "lightgrey", highlight = "yellow") )
nodes <- data.frame(id = 1:2, shape = c("box"),label = c("Sælger \n tilbudsgiver ","Køber \n tilbudsmodtager "),font.size = c(15,15))
edges <- data.frame(from = c(1),
to = c(2),
arrows = c("to","from"),
length = c(800,500),
font.size = c(12,12),
label=c("1. Sælger sender tilbud til køber","2. Køber sender accept/ordre"),
smooth = TRUE
)
visNetwork(nodes, edges,  width = "100%") %>%
visInteraction(dragNodes = TRUE,
dragView = TRUE,
zoomView = FALSE) %>%
visNodes(color = list(background = "white",
border = "white",
highlight = "yellow"),
shadow = list(enabled = TRUE, size = 30))  %>%
visHierarchicalLayout(direction = "LR",levelSeparation = 400) %>%
visEdges(color = list(color = "lightgrey", highlight = "yellow") )
nodes <- data.frame(id = 1:2, shape = c("box"),label = c("Sælger \n tilbudsmodtager ","Køber \n tilbudsgiver "),font.size = c(20,20))
edges <- data.frame(from = c(1),
to = c(2),
arrows = c("to","from"),
length = c(800,500),
label=c("2. Sælger sender \n accept/ordrebekræftelse","1. Køber sender købstilbud/ordre"),
smooth = TRUE
)
visNetwork(nodes, edges,  width = "100%") %>%
visInteraction(dragNodes = TRUE,
dragView = TRUE,
zoomView = FALSE) %>%
visNodes(color = list(background = "white",
border = "white",
highlight = "yellow"),
shadow = list(enabled = TRUE, size = 30))  %>%
visHierarchicalLayout(direction = "LR",levelSeparation = 400) %>%
visEdges(color = list(color = "lightgrey", highlight = "yellow") )
options(knitr.table.format = "html")
collapse_rows_dt <- data.frame(Regel = c("Koncipistreglen", "Minimumsreglen","Prioritetsreglen", "Gyldighedsreglen","Rimelighedsreglen"),
Fortolkning = c("Dette fortolkningsprincip er også benævnt som uklarhedsreglen og betyder, at den part som har konciperet (skrevet) kontrakten må bære risikoen for tvetydighed. Er der en uklarhed i kontrakten, tolkes aftalen til skade eller ugunst for koncipisten og dermed mindst tyngende for den anden part, som ikke har haft indflydelse på aftalens formulering. Uklarhedsreglen er særlig relevant ved fortolkning af standardaftaler, der er udarbejdet af en stærk part.",
"Hvis der er tvivl om, hvad løftegiveren har forpligtet sig til i aftalen, vælges den forståelse af aftalen, som er
mest gunstig for løftegiveren. Hvis der fx er tvivl, om der er aftalt simpel kaution eller selvskyldnerkaution, vælges simpel kaution, der er mest gunstig for forbrugeren. Særligt hvad angår forbrugeraftaler, har minimumsreglen fundet en plads i AFTL § 38b. Bestemmelsen beskytter forbrugeren i de tilfælde, hvor et tyngende aftalevilkår ikke har været til forhandling med en erhvervsdrivende aftalepart. En sådan aftale skal tolkes på den måde, som er mest gunstig for forbrugeren.
",
"Ved fortolkning efter prioritetsreglen går et specielt vilkår forud for et generelt vilkår. Man kan også kalde det en fortolkning efter et lex specialis-princip, hvor en speciel og udspecificeret bestemmelse vejer tungere end en generel formuleret bestemmelse",
"Hvis man står overfor et valg, om aftalen er gyldig og kan gennemføres, eller ugyldig og må bortfalde, er gyldighedsreglen et fortolkningsprincip, hvor aftalen tolkes med henblik på at opnå en gyldig aftale, som vil kunne gennemføres.",
"Efter rimelighedsreglen fortolker man ud fra hensigtsmæssigheds- og rimelighedsbetragtninger. Ved tvivl om forståelsen af en aftale, tolkes aftalen i overensstemmelse med, hvad der er rimeligt."))
kable(collapse_rows_dt, align = "l",caption = "Regler og tolkning") %>%
kable_styling(full_width = T,bootstrap_options = c( "hover","responsive","bordered","striped")) %>%
column_spec(1, bold = F) %>%
collapse_rows(columns = 1:2, valign = "top") %>%
column_spec(1:2,  bold = F, color = "black", background = "lightgrey")%>%
column_spec(1,  bold = T,italic = TRUE)%>%
row_spec(0, bold = T, color = "white", background = "darkgrey")
# row_spec(5:9, bold = T, color = "Black", background = "yellow") %>%
# add_header_above(c( "Koncipistreglen" = 2),italic = TRUE)
options(knitr.table.format = "html")
collapse_rows_dt <- data.frame(Regel = c("Koncipistreglen", "Minimumsreglen","Prioritetsreglen", "Gyldighedsreglen","Rimelighedsreglen"),
Fortolkning = c("Dette fortolkningsprincip er også benævnt som uklarhedsreglen og betyder, at den part som har konciperet (skrevet) kontrakten må bære risikoen for tvetydighed. Er der en uklarhed i kontrakten, tolkes aftalen til skade eller ugunst for koncipisten og dermed mindst tyngende for den anden part, som ikke har haft indflydelse på aftalens formulering. Uklarhedsreglen er særlig relevant ved fortolkning af standardaftaler, der er udarbejdet af en stærk part.",
"Hvis der er tvivl om, hvad løftegiveren har forpligtet sig til i aftalen, vælges den forståelse af aftalen, som er
mest gunstig for løftegiveren. Hvis der fx er tvivl, om der er aftalt simpel kaution eller selvskyldnerkaution, vælges simpel kaution, der er mest gunstig for forbrugeren. Særligt hvad angår forbrugeraftaler, har minimumsreglen fundet en plads i aftalelovens § 38b. Lovbestemmelsen beskytter forbrugeren i de tilfælde, hvor et tyngende aftalevilkår ikke har været til forhandling med en erhvervsdrivende aftalepart. En sådan aftale skal tolkes på den måde, som er mest gunstig for forbrugeren.
",
"Ved fortolkning efter prioritetsreglen går et specielt vilkår forud for et generelt vilkår. Man kan også kalde det en fortolkning efter et lex specialis-princip, hvor en speciel og udspecificeret bestemmelse vejer tungere end en generel formuleret bestemmelse",
"Hvis man står overfor et valg, om aftalen er gyldig og kan gennemføres, eller ugyldig og må bortfalde, er gyldighedsreglen et fortolkningsprincip, hvor aftalen tolkes med henblik på at opnå en gyldig aftale, som vil kunne gennemføres.",
"Efter rimelighedsreglen fortolker man ud fra hensigtsmæssigheds- og rimelighedsbetragtninger. Ved tvivl om forståelsen af en aftale, tolkes aftalen i overensstemmelse med, hvad der er rimeligt."))
kable(collapse_rows_dt, align = "l",caption = "Regler og tolkning") %>%
kable_styling(full_width = T,bootstrap_options = c( "hover","responsive","bordered","striped")) %>%
column_spec(1, bold = F) %>%
collapse_rows(columns = 1:2, valign = "top") %>%
column_spec(1:2,  bold = F, color = "black", background = "lightgrey")%>%
column_spec(1,  bold = T,italic = TRUE)%>%
row_spec(0, bold = T, color = "white", background = "darkgrey")
# row_spec(5:9, bold = T, color = "Black", background = "yellow") %>%
# add_header_above(c( "Koncipistreglen" = 2),italic = TRUE)
options(knitr.table.format = "html")
collapse_rows_dt <- data.frame(Regel = c("Koncipistreglen", "Minimumsreglen","Prioritetsreglen", "Gyldighedsreglen","Rimelighedsreglen"),
Fortolkning = c("Dette fortolkningsprincip er også benævnt som uklarhedsreglen og betyder, at den part som har konciperet (skrevet) kontrakten må bære risikoen for tvetydighed. Er der en uklarhed i kontrakten, tolkes aftalen til skade eller ugunst for koncipisten og dermed mindst tyngende for den anden part, som ikke har haft indflydelse på aftalens formulering. Uklarhedsreglen er særlig relevant ved fortolkning af standardaftaler, der er udarbejdet af en stærk part.",
"Hvis der er tvivl om, hvad løftegiveren har forpligtet sig til i aftalen, vælges den forståelse af aftalen, som er
mest gunstig for løftegiveren. Hvis der fx er tvivl, om der er aftalt simpel kaution eller selvskyldnerkaution, vælges simpel kaution, der er mest gunstig for forbrugeren. Særligt hvad angår forbrugeraftaler, har minimumsreglen fundet en plads i aftalelovens § 38b. Lovbestemmelsen beskytter forbrugeren i de tilfælde, hvor et tyngende aftalevilkår ikke har været til forhandling med en erhvervsdrivende aftalepart. En sådan aftale skal tolkes på den måde, som er mest gunstig for forbrugeren.
",
"Ved fortolkning efter prioritetsreglen går et specielt vilkår forud for et generelt vilkår. Man kan også kalde det en fortolkning efter et lex specialis-princip, hvor en speciel og udspecificeret bestemmelse vejer tungere end en generel formuleret bestemmelse",
"Hvis man står overfor et valg, om aftalen er gyldig og kan gennemføres, eller ugyldig og må bortfalde, er gyldighedsreglen et fortolkningsprincip, hvor aftalen tolkes med henblik på at opnå en gyldig aftale, som vil kunne gennemføres.",
"Efter rimelighedsreglen fortolker man ud fra hensigtsmæssigheds- og rimelighedsbetragtninger. Ved tvivl om forståelsen af en aftale, tolkes aftalen i overensstemmelse med, hvad der er rimeligt."))
kable(collapse_rows_dt, align = "l",caption = "Regler og tolkning") %>%
kable_styling(full_width = T,bootstrap_options = c( "hover","responsive","bordered","striped")) %>%
column_spec(1, bold = F) %>%
collapse_rows(columns = 1:2, valign = "top") %>%
column_spec(1:2,  bold = F, color = "black", background = "lightgrey")%>%
column_spec(1,  bold = T,italic = TRUE)%>%
row_spec(0, bold = T, color = "white", background = "darkgrey")
# row_spec(5:9, bold = T, color = "Black", background = "yellow") %>%
# add_header_above(c( "Koncipistreglen" = 2),italic = TRUE)
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
rmarkdown::render_site(output_format = 'bookdown::gitbook', encoding = 'UTF-8')
system("git config --global user.email 'cphthomas@gmail.com' && git config --global user.name 'cphthomas' && git config --global credential.helper 'cache --timeout 3600000'")
system("git config --global push.default matching")
system("git add . && git commit -a -m . && git push")
